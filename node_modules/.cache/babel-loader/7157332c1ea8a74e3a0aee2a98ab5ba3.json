{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/context.js\";\nimport React, { useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\nconst API = process.env.REACT_APP_API; // REACT_APP_API=https://auth-server-401d39.herokuapp.com\n\nexport const LoginContext = React.createContext();\n\nfunction LoginProvider(props) {\n  const [user, setUser] = useState({});\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const login = (username, password) => {\n    fetch(`${API}/signin`, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: new Headers({\n        'Authorization': `Basic ${btoa(`${username}:${password}`)}`\n      })\n    }).then(response => {\n      // console.log('response from server', response);\n      return response.json();\n    }).then(user => {\n      console.log('user', user);\n      validateToken(user.token);\n    });\n  };\n\n  const validateToken = token => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n      setLogInState(true, token, user);\n    } catch {\n      setLogInState(false, null, {});\n    }\n  };\n\n  const setLogInState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    setLoggedIn(true);\n    setUser(user);\n  };\n\n  const state = {\n    user,\n    loggedIn,\n    login: login\n  };\n  return /*#__PURE__*/React.createElement(LoginContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\nexport default LoginProvider;\n\nconst updateUserName = username => {};\n\nconst updatePassword = password => {}; // post to /signin\n// need our API url\n// a library or fetch\n// our backend is expecting us to send our username and password encoded in the headers\n// some sort of function to update username and password\n// state\n// need an updateUserName(username)\n// need an updatePassword(password)\n// we should be getting back a token with a user object from the backend","map":{"version":3,"sources":["/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/context.js"],"names":["React","useState","jwt","cookie","API","process","env","REACT_APP_API","LoginContext","createContext","LoginProvider","props","user","setUser","loggedIn","setLoggedIn","login","username","password","fetch","method","mode","cache","headers","Headers","btoa","then","response","json","console","log","validateToken","token","verify","REACT_APP_SECRET","setLogInState","save","state","children","updateUserName","updatePassword"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAxB,C,CACA;;AAEA,OAAO,MAAMC,YAAY,GAAGR,KAAK,CAACS,aAAN,EAArB;;AAEP,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMe,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpCC,IAAAA,KAAK,CAAE,GAAEf,GAAI,SAAR,EAAkB;AACrBgB,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,IAAI,EAAE,MAFe;AAGrBC,MAAAA,KAAK,EAAE,UAHc;AAIrBC,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,yBAAkB,SAAQC,IAAI,CAAE,GAAER,QAAS,IAAGC,QAAS,EAAzB,CAA4B;AADvC,OAAZ;AAJY,KAAlB,CAAL,CAQCQ,IARD,CAQMC,QAAQ,IAAI;AAChB;AACA,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAXD,EAYCF,IAZD,CAYMd,IAAI,IAAI;AACZiB,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBlB,IAApB;AACAmB,MAAAA,aAAa,CAACnB,IAAI,CAACoB,KAAN,CAAb;AACD,KAfD;AAgBD,GAjBD;;AAmBA,QAAMD,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAI;AACF,UAAIpB,IAAI,GAAGV,GAAG,CAAC+B,MAAJ,CAAWD,KAAX,EAAkB3B,OAAO,CAACC,GAAR,CAAY4B,gBAA9B,CAAX;AACAC,MAAAA,aAAa,CAAC,IAAD,EAAOH,KAAP,EAAcpB,IAAd,CAAb;AACD,KAHD,CAIA,MAAM;AACJuB,MAAAA,aAAa,CAAC,KAAD,EAAQ,IAAR,EAAc,EAAd,CAAb;AACD;AACF,GARD;;AAUA,QAAMA,aAAa,GAAG,CAACrB,QAAD,EAAWkB,KAAX,EAAkBpB,IAAlB,KAA2B;AAC/CT,IAAAA,MAAM,CAACiC,IAAP,CAAY,MAAZ,EAAoBJ,KAApB;AACAjB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAJD;;AAMA,QAAMyB,KAAK,GAAG;AACZzB,IAAAA,IADY;AAEZE,IAAAA,QAFY;AAGZE,IAAAA,KAAK,EAAEA;AAHK,GAAd;AAMA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEqB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG1B,KAAK,CAAC2B,QADT,CADF;AAKD;;AAED,eAAe5B,aAAf;;AAEA,MAAM6B,cAAc,GAAItB,QAAD,IAAc,CAGpC,CAHD;;AAKA,MAAMuB,cAAc,GAAItB,QAAD,IAAc,CAEpC,CAFD,C,CAGA;AACI;AACA;AACA;AACA;AAEA;AACE;AACA;AAEJ","sourcesContent":["import React, { useState } from 'react';\nimport jwt from 'jsonwebtoken';\nimport cookie from 'react-cookies';\n\nconst API = process.env.REACT_APP_API; \n// REACT_APP_API=https://auth-server-401d39.herokuapp.com\n\nexport const LoginContext = React.createContext();\n\nfunction LoginProvider(props){\n  const [user, setUser] = useState({});\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const login = (username, password) => {\n    fetch(`${API}/signin`, {\n      method: 'post',\n      mode: 'cors', \n      cache: 'no-cache',\n      headers: new Headers({\n        'Authorization': `Basic ${btoa(`${username}:${password}`)}`\n      }),\n    })\n    .then(response => {\n      // console.log('response from server', response);\n      return response.json();\n    })\n    .then(user => {\n      console.log('user', user);\n      validateToken(user.token);\n    })\n  }\n\n  const validateToken = (token) => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n      setLogInState(true, token, user);\n    }\n    catch {\n      setLogInState(false, null, {});\n    }\n  }\n\n  const setLogInState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    setLoggedIn(true);\n    setUser(user);\n  }\n\n  const state = {\n    user, \n    loggedIn,\n    login: login\n  }\n\n  return(\n    <LoginContext.Provider value={state}>\n      {props.children}\n    </LoginContext.Provider>\n  )\n}\n\nexport default LoginProvider\n\nconst updateUserName = (username) => {\n\n\n}\n\nconst updatePassword = (password) => {\n    \n}\n// post to /signin\n    // need our API url\n    // a library or fetch\n    // our backend is expecting us to send our username and password encoded in the headers\n    // some sort of function to update username and password\n\n    // state\n      // need an updateUserName(username)\n      // need an updatePassword(password)\n\n  // we should be getting back a token with a user object from the backend\n"]},"metadata":{},"sourceType":"module"}