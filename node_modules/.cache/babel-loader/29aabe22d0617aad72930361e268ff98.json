{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/todo-connected.js\";\nimport React, { useEffect, useState } from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\nimport './todo.scss';\nimport useAjax from './hooks/ajax.js';\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\nconst ToDoConnected = () => {\n  const {\n    data,\n    request\n  } = useAjax();\n  const [list, setList] = useState([]); // const [count, setCount] = useState();\n\n  const _getTodoItems = () => {\n    const options = {\n      method: 'get',\n      url: todoAPI\n    };\n    console.log(options);\n    const obj = request(options);\n    console.log(obj); // setList(data);//may need curlies\n  }; //when this component mounts it calls this get todo list function\n\n\n  useEffect(() => {\n    _getTodoItems();\n  }, []); // this is allowing two thigns to happen simultaneously. \n\n  const _addItem = item => {\n    const options = {\n      // item.due = new Date(),\n      // fetch(todoAPI, {\n      method: 'post',\n      url: todoAPI,\n      data: item // mode: 'cors'\n      // cache: 'no-cache',\n      // headers: { 'Content-Type': 'application/json' },\n      // body: JSON.stringify(item)\n\n    };\n    useAjax(options); // .then(response => response.json())\n    // .then(savedItem => {\n    // setList([...list, savedItem])\n    // })\n    // .catch(console.error);\n  };\n\n  const _toggleComplete = id => {\n    let item = list.filter(i => i._id === id)[0] || {};\n    const options = {\n      method: 'put',\n      url: `${todoAPI}/${id}`,\n      data: {\n        complete: !item.complete\n      }\n    };\n    const data = useAjax(options);\n    setList(data); //may need curlies\n  };\n\n  const _delete = async id => {\n    let item = list.filter(i => i._id === id)[0] || {};\n\n    if (item._id) {\n      item.complete = !item.complete;\n    }\n\n    let url = `${todoAPI}/${id}`;\n    await fetch(url, {\n      method: 'delete',\n      mode: 'cors',\n      cache: 'no-cache',\n      header: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.Stringify(item)\n    }).then(savedItem => {\n      _getTodoItems;\n    }).catch(console.err);\n  }; // let item = list.filter(i => i._id === id)[0] || {};\n  // if (item._id) {\n  //   item.complete = !item.complete;\n  //   let url = `${todoAPI}/${id}`;\n  //   fetch(url, {\n  //     method: 'put',\n  //     mode: 'cors',\n  //     cache: 'no-cache',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(item)\n  //   })\n  //     .then(response => response.json())\n  //     .then(savedItem => {\n  //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n  //     })\n  //     .catch(console.error);\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, \"There are \", list.filter(item => !item.complete).length, \" Items To Complete\")), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TodoForm, {\n    handleSubmit: _addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    list: list,\n    handleComplete: _toggleComplete,\n    deleteOne: _delete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default ToDoConnected;","map":{"version":3,"sources":["/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/todo-connected.js"],"names":["React","useEffect","useState","TodoForm","TodoList","useAjax","todoAPI","ToDoConnected","data","request","list","setList","_getTodoItems","options","method","url","console","log","obj","_addItem","item","_toggleComplete","id","filter","i","_id","complete","_delete","fetch","mode","cache","header","body","JSON","Stringify","then","savedItem","catch","err","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\n\nimport './todo.scss';\nimport useAjax from './hooks/ajax.js';\n\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\n\nconst ToDoConnected = () => {\n\n  const { data, request } = useAjax();\n  const [list, setList] = useState([]);\n  // const [count, setCount] = useState();\n\n  const _getTodoItems = () => {\n    const options = { \n        method: 'get',\n        url: todoAPI,    \n      }\n      console.log(options);\n      const obj = request(options);\n      console.log(obj)\n      // setList(data);//may need curlies\n  };\n//when this component mounts it calls this get todo list function\n  useEffect(()=> {\n    _getTodoItems();\n  }, []); // this is allowing two thigns to happen simultaneously. \n\n  const _addItem = (item) => {\n    const options = { \n    // item.due = new Date(),\n    // fetch(todoAPI, {\n      method: 'post',\n      url: todoAPI,\n      data: item,\n      // mode: 'cors'\n      // cache: 'no-cache',\n      // headers: { 'Content-Type': 'application/json' },\n      // body: JSON.stringify(item)\n    }\n    useAjax(options);\n      // .then(response => response.json())\n      // .then(savedItem => {\n        // setList([...list, savedItem])\n      // })\n      // .catch(console.error);\n  };\n\n  const _toggleComplete = id => {\n    let item = list.filter(i => i._id === id)[0] || {};\n    const options = { \n      method: 'put',\n      url: `${todoAPI}/${id}`, \n      data: { complete: !item.complete },\n    }\n    const data = useAjax(options);\n    setList(data);//may need curlies\n};\n\nconst _delete = async (id) => {\n  let item = list.filter(i => i._id === id)[0] || {};\n  if(item._id){\n    item.complete = !item.complete;\n  }\n  let url = `${todoAPI}/${id}`;\n  await fetch (url, {\n    method: 'delete',\n    mode: 'cors',\n    cache: 'no-cache',\n    header: { 'Content-Type': 'application/json'},\n    body: JSON.Stringify(item)\n    })\n    .then (savedItem => {\n      _getTodoItems\n    })\n    .catch(console.err);\n}\n\n    // let item = list.filter(i => i._id === id)[0] || {};\n\n    // if (item._id) {\n\n    //   item.complete = !item.complete;\n\n    //   let url = `${todoAPI}/${id}`;\n\n    //   fetch(url, {\n    //     method: 'put',\n    //     mode: 'cors',\n    //     cache: 'no-cache',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify(item)\n    //   })\n    //     .then(response => response.json())\n    //     .then(savedItem => {\n    //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n    //     })\n    //     .catch(console.error);\n  // };\n\n  return (\n    <>\n      <header>\n        <h2>\n          There are {list.filter(item => !item.complete).length} Items To Complete\n        </h2>\n      </header>\n        <section className=\"todo\">\n          <div>\n            <TodoForm handleSubmit={_addItem} />\n          </div>\n\n          <div>\n            <TodoList\n              list={list}\n              handleComplete={_toggleComplete}\n              deleteOne={_delete}\n            />\n          </div>\n        </section>\n    </>\n  );\n};\n\nexport default ToDoConnected;"]},"metadata":{},"sourceType":"module"}