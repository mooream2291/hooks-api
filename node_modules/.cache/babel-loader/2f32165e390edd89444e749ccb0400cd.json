{"ast":null,"code":"var _jsxFileName = \"/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/todo-connected.js\";\nimport React, { useEffect, useState } from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\nimport './todo.scss';\nimport useAjax from './hooks/ajax.js';\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\nconst ToDoConnected = () => {\n  const {\n    data,\n    request\n  } = useAjax();\n  const [count, setCount] = useState();\n  const [list, setList] = useState([]); // const [count, setCount] = useState();\n\n  console.log(list);\n\n  const _getTodoItems = () => {\n    const options = {\n      method: 'get',\n      url: todoAPI\n    };\n    request(options);\n    setList(data);\n    console.log(data); // setList(data);//may need curlies\n  }; //when this component mounts it calls this get todo list function\n\n\n  useEffect(() => {\n    if (list.length === 0) {\n      _getTodoItems();\n    }\n\n    setCount(list.filter(item => !item.complete).length);\n    document.title = `todo list: (${count})`;\n  }, [data, list, count]); // this is allowing two thigns to happen simultaneously. \n\n  const _addItem = item => {\n    const options = {\n      method: 'post',\n      url: todoAPI,\n      data: item\n    };\n    console.log(item);\n    request(options);\n    setList(data);\n  };\n\n  const _toggleComplete = id => {\n    let item = list.filter(i => i._id === id)[0] || {};\n    const options = {\n      method: 'put',\n      url: `${todoAPI}/${id}`,\n      data: {\n        complete: !item.complete\n      }\n    };\n    const newData = useAjax(options);\n    setList(newdata); //may need curlies\n  }; // let item = list.filter(i => i._id === id)[0] || {};\n  // if (item._id) {\n  //   item.complete = !item.complete;\n  //   let url = `${todoAPI}/${id}`;\n  //   fetch(url, {\n  //     method: 'put',\n  //     mode: 'cors',\n  //     cache: 'no-cache',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(item)\n  //   })\n  //     .then(response => response.json())\n  //     .then(savedItem => {\n  //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n  //     })\n  //     .catch(console.error);\n  // };\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"There are \", list.filter(item => !item.complete).length, \" Items To Complete\")), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TodoForm, {\n    handleSubmit: _addItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TodoList, {\n    list: list,\n    handleComplete: _toggleComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default ToDoConnected;","map":{"version":3,"sources":["/Users/ashleymoore/Documents/codefellows/code401/lab-31/hooks-api/src/components/todo/todo-connected.js"],"names":["React","useEffect","useState","TodoForm","TodoList","useAjax","todoAPI","ToDoConnected","data","request","count","setCount","list","setList","console","log","_getTodoItems","options","method","url","length","filter","item","complete","document","title","_addItem","_toggleComplete","id","i","_id","newData","newdata"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TodoForm from './form.js';\nimport TodoList from './list.js';\n\nimport './todo.scss';\nimport useAjax from './hooks/ajax.js';\n\nconst todoAPI = 'https://api-js401.herokuapp.com/api/v1/todo';\n\n\nconst ToDoConnected = () => {\n\n  const { data, request } = useAjax();\n  const [count, setCount] = useState();\n  const [list, setList] = useState([]);\n  // const [count, setCount] = useState();\nconsole.log(list);\n  const _getTodoItems = () => {\n    const options = { \n        method: 'get',\n        url: todoAPI,    \n      }\n      request(options);\n      setList(data);\n      console.log(data);\n      \n      // setList(data);//may need curlies\n  };\n//when this component mounts it calls this get todo list function\n  useEffect(()=> {\n    if(list.length === 0){\n      _getTodoItems();\n    }\n    setCount(list.filter(item => !item.complete).length);\n    document.title = `todo list: (${count})`;\n  }, [data, list, count]); // this is allowing two thigns to happen simultaneously. \n\n  const _addItem = (item) => {\n    const options = { \n \n      method: 'post',\n      url: todoAPI,\n      data: item,\n   \n    }\n    console.log(item);\n    request(options);\n    setList(data);\n\n  };\n\n  const _toggleComplete = id => {\n    let item = list.filter(i => i._id === id)[0] || {};\n    const options = {\n\n      method: 'put',\n      url: `${todoAPI}/${id}`, \n      data: { complete: !item.complete },\n    }\n    const newData = useAjax(options);\n    setList(newdata);//may need curlies\n};\n\n    // let item = list.filter(i => i._id === id)[0] || {};\n\n    // if (item._id) {\n\n    //   item.complete = !item.complete;\n\n    //   let url = `${todoAPI}/${id}`;\n\n    //   fetch(url, {\n    //     method: 'put',\n    //     mode: 'cors',\n    //     cache: 'no-cache',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify(item)\n    //   })\n    //     .then(response => response.json())\n    //     .then(savedItem => {\n    //       setList(list.map(listItem => listItem._id === item._id ? savedItem : listItem));\n    //     })\n    //     .catch(console.error);\n  // };\n\n  return (\n    <>\n      <header>\n        <h2>\n          There are {list.filter(item => !item.complete).length} Items To Complete\n        </h2>\n      </header>\n        <section className=\"todo\">\n          <div>\n            <TodoForm handleSubmit={_addItem} />\n          </div>\n\n          <div>\n            <TodoList\n              list={list}\n              handleComplete={_toggleComplete}\n            />\n          </div>\n        </section>\n    </>\n  );\n};\n\nexport default ToDoConnected;"]},"metadata":{},"sourceType":"module"}